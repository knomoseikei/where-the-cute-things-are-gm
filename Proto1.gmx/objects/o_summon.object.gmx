<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_provisionalSummon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*var randDirection = random(360);
var randDistance = random(1);
x = room_width / 2 + (lengthdir_x(randDistance, randDirection) * 600);
ground = 750 + lengthdir_y(randDistance, randDirection) * 75;
y = ground;*/
depth = 0
queue = ds_list_create();
timer = ds_list_create();
receive = 0;
vsp = 0;
tilt = 0;
returnToNormal = 0;
enabled = false;
appear = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if enabled == true {
    if appear == false {
        appear = true;
        repeat (20) {
            var fx = instance_create(x, y - 70, o_fx);
            fx.type = 0;
            fx.image_blend = make_color_rgb(128, 192 + random(63), 128);
        }
    }

    visible = true;
    //Recibe los comandos de broadcast();
    switch (type) {
        case 0:
            sprite_index = s_cuySol;
            image_xscale = .5;
            image_yscale = .5;
            break;
        case 1:
            sprite_index = s_cuervoLuna;
            image_xscale = .5;
            image_yscale = .5;
            break;
        case 2:
            sprite_index = s_madPig;
            image_xscale = .5;
            image_yscale = .5;
            break;
        case 3:
            sprite_index = s_hearty;
            image_xscale = .5;
            image_yscale = .5;
            break;
    }
    
    if receive != 0 &amp;&amp; instance_number(o_player) &gt; 0 {
        ds_list_add(queue, receive);
        if receive == -1 {
            //Si es un miss se desorganizan
            ds_list_add(timer, abs(x - o_player.x) + 25 + random(75));
        } else {
            ds_list_add(timer, abs(x - o_player.x) + 50);
        }
        receive = 0;
    }
    
    var timerCheck = 0;
    var queueSize = ds_list_size(queue)
    //check if queue is empty
    if queueSize &gt; 0 {
        //check every item
        for (var i = 0; i &lt; queueSize; ++i) {
            timerCheck = ds_list_find_value(timer, i);
            timerCheck -= 100;
            ds_list_replace(timer, i, timerCheck);
        }
    }
    //Si el primer comando tiene un timer negativo
    if  ds_list_find_value(timer, 0) &lt; 0 {
        //Ejecuta la accion
        direction = ds_list_find_value(queue, 0);
        //check de miss
        if direction == 359 {
            tilt = (10 + random(5)) * choose(1, -1);
        }
        small_jump();
        //Elimina el comando de la lista
        ds_list_delete(queue, 0);
        ds_list_delete(timer, 0);
    }
    
    //"physics"
    image_index = direction;
    if direction == 359 {
        image_index = 5;
        image_angle = tilt;
    } else {
        image_angle = 0;
    }
    y += vsp;
    if y &gt; ground {
        y = ground;
    }
    vsp += 2;
} else {
    visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
