<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_target</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = .75;
image_yscale = .75;
rotation = 0
recording = false;
record = ""
seqLength = 0;
level = 0;
musicDelay = -1;
sacrifice = 0;
totalSacrifices = 0;

//set up Game state
gameState = "Title";

//Set up all Game dialog
talk_script();
sequences();


//audio_play_sound(bgm_throwingAcid, 1, false);


//Insert variables here vvv
//ini_write_real("save","room",45.4);
//ini_write_real("save","score",3453.45);
//show_debug_message(ini_read_string("level1","sequence","error"))
//Insert variables here ^^^

//list of arrows
arrowList = ds_list_create();
timer = 0;
pressed = -4;
arrowSeq = ds_list_create();
tapTime = -1;
tapX = 0;
tapY = 0;
textIndex = 0;
speechIndex = 0;

load_level(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if gameState == "Game" {
    if timer mod 1 == 0  {
        //creates arrows and adds to a list
        //ds_list_add(arrowList, create_arrow(choose(vk_up, vk_down, vk_left, vk_right), 25));
        if ds_list_size(arrowSeq) &gt; 0 { 
            //ONLY WORKS IF THERE'S MORE COMMANDS
            if ds_list_find_value(arrowSeq, 0) != vk_nokey {
                //ONLY SENDS A COMMAND IF THERE'S A VALID ENTRY
                ds_list_add(arrowList, create_arrow(ds_list_find_value(arrowSeq, 0), 35));
            }
            ds_list_delete(arrowSeq, 0);
        }
    }
    ++timer
    if instance_number(o_arrow) == 0 &amp;&amp; timer &gt; seqLength {
        gameState = "Cutscene";
        if level = 2 {
            gameState = "End";
            o_curtain.door = 1;
        }
    }
if keyboard_check_pressed(vk_up)    {pressed = vk_up}
if keyboard_check_pressed(vk_down)  {pressed = vk_down}
if keyboard_check_pressed(vk_left)  {pressed = vk_left}
if keyboard_check_pressed(vk_right) {pressed = vk_right}
swipe_controls();
}

if pressed != -4 {
    //check if there's any arrows
    var arrowListSize = ds_list_size(arrowList);
    if arrowListSize == 0 {
        //immediately fails
        miss_arrow();
    } else {
        //check the first incoming arrow
        var _arr = ds_list_find_value(arrowList, 0);
        if place_meeting(x, y, _arr) {
            //it's within the area
            if pressed == _arr.type {
                //it's a hit
                hit_arrow(pressed);
                repeat(5) {
                    var fx = instance_create(x, y, o_fx);
                    fx.type = floor(random(2) + 1);
                    fx.image_blend = make_color_rgb(192 + random(64), 192 + random(64), 128);
                }
                //delete arrow
                with (_arr) instance_destroy();
                ++sacrifice;
                if sacrifice &gt; 15 {
                    sacrifice = 0;
                    ++totalSacrifices;
                    switch (totalSacrifices) {
                        case 6:
                            with (o_summon) {
                                if type == 0 {
                                    enabled = true;
                                }
                            }
                            break;
                        case 12:
                            with (o_summon) {
                                if type == 1 {
                                    enabled = true;
                                }
                            }
                            break;
                        case 18:
                            with (o_summon) {
                                if type == 2 {
                                    enabled = true;
                                }
                            }
                            break;
                        case 24:
                            with (o_summon) {
                                if type == 3 {
                                    enabled = true;
                                }
                            }
                            break;
                        case 31:
                            //do the game over
                            break;
                    }
                    find_and_kill();
                }
            } else {
                //it's a miss
                miss_arrow();
                //delete arrow
                with (_arr) instance_destroy();
            }
        } else {
            //immediately fails
            miss_arrow();
        }
    }
    pressed = -4;
}
/*
if keyboard_check_pressed(vk_backspace) {
    audio_stop_all();
    game_restart();
}*/

if musicDelay &gt; 0 {
    --musicDelay;
} else {
    if musicDelay == 0 {
        switch (level) {
            case 0:
                audio_play_sound(bgm_throwingAcid, 1, false);
                break;
            case 1:
                audio_play_sound(bgm_gogoTank, 1, false);
                break;
            case 2:
                audio_play_sound(bgm_burningKey, 1, false);
                break;
        }
        musicDelay = -1;
    }
}
/*
//killer moves
if keyboard_check_pressed(vk_subtract) {
    find_and_kill();
}

//RECORDING TOOLS
if keyboard_check_pressed(vk_numpad7) {
    audio_stop_all();
    audio_play_sound(bgm_throwingAcid, 1, false);
}
if keyboard_check_pressed(vk_numpad8) {
    audio_stop_all();
    audio_play_sound(bgm_burningKey, 1, false);
}
if keyboard_check_pressed(vk_numpad9) {
    audio_stop_all();
    audio_play_sound(bgm_gogoTank, 1, false);
}
if keyboard_check(vk_add) {
    recording = true;
    gameState = "Recording";
    record = "";
}
if recording == true {
    record = string_cap(record);
}
if keyboard_check(vk_enter) {
    file = file_text_open_write("recording.txt");
    file_text_write_string(file, record);
    file_text_close(file);
    recording = false;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>++rotation;
if gameState == "Game" {
    draw_sprite_ext(s_target, 0, x, y, .75, .75, rotation * 3, c_white, 1);
    draw_sprite_ext(s_target, 1, x, y, .65 + (cos(rotation * .2) * .1), .75 + (sin(rotation * .2) * .1), -rotation * 5, c_white, 1);
    /*draw_set_font(f_0);
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(0, 0, string(instance_number(o_arrow)));*/
}

if gameState == "Cutscene" {
    draw_set_color(c_white);
    draw_set_alpha(.5);
    draw_rectangle(75, 75, room_width - 75, 375, false);
    draw_set_alpha(1);
    draw_set_color(make_color_rgb(170, 012, 165));
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    speechIndex = gods_enabled();
    draw_text(85, 85, slow_transcript(textIndex, speech[speechIndex]));
    ++textIndex;
    if ceil(textIndex / 2) &gt; string_length(speech[speechIndex]) {
        if keyboard_check_pressed(vk_anykey) || mouse_check_button_pressed(mb_left) {
            ++level;
            textIndex = 0;
            musicDelay = 30;
            timer = 0;
            load_level(level);
            gameState = "Game";
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
